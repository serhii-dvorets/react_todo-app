{"version":3,"sources":["components/TodoList.jsx","components/TodosFilter.jsx","components/TodoApp.jsx","App.jsx","index.js"],"names":["TodoList","todoList","onCompleted","onRemove","onUpdate","useState","editingId","setEditingId","updatedTitle","setUpdatedTitle","handleChange","e","key","className","map","todo","classNames","completed","editing","id","onDoubleClick","onBlur","type","checked","onChange","title","onClick","value","target","onKeyDown","TodosFilter","onFilter","href","TodoApp","inputText","setInputText","setTodoList","allTodosCompleted","setAllTodosCompleted","filterType","setFilterType","unCompletedTodos","filter","updateInput","useCallback","onSubmit","preventDefault","Date","placeholder","length","completedTodos","htmlFor","todos","filteredTodos","completedTodoId","status","find","updatedTodoList","removedTodoId","newTodos","newValue","todoToUpdateId","updatedTodos","newType","onlyInCompletedTodos","App","ReactDOM","render","document","getElementById"],"mappings":"wRAGaA,EAAW,SAAC,GAKlB,IAJLC,EAII,EAJJA,SACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,SACAC,EACI,EADJA,SAEA,EAAkCC,qBAAlC,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAEMC,EAAe,SAACC,GACN,UAAVA,EAAEC,MACJR,EAASI,EAAcF,GACvBC,GAAc,IAGF,WAAVI,EAAEC,KACJL,GAAc,IAIlB,OACE,oBAAIM,UAAU,YAAd,SACGZ,EAASa,KAAI,SAAAC,GAAI,OAChB,qBAEEF,UAAWG,IACT,CAAEC,UAAWF,EAAKE,WAClB,CAAEC,QAASZ,IAAcS,EAAKI,KAEhCC,cAAe,WACbb,EAAaQ,EAAKI,KAEpBE,OAAQ,WACNjB,EAASI,EAAcF,GACvBC,GAAc,IAXlB,UAcE,sBAAKM,UAAU,OAAf,UACE,uBACES,KAAK,WACLT,UAAU,SACVU,QAASR,EAAKE,UACdO,SAAU,WACRtB,EAAYa,EAAKI,OAGrB,gCACGJ,EAAKU,QAER,wBACEH,KAAK,SACLT,UAAU,UACVa,QAAS,WACPvB,EAASY,EAAKI,UAIpB,uBACEG,KAAK,OACLT,UAAU,OACVc,MAAOnB,GAAgBO,EAAKU,MAC5BD,SAAU,SAACb,GACTF,EAAgBE,EAAEiB,OAAOD,QAE3BE,UAAWnB,MAxCRK,EAAKI,UCzBPW,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACzB,qBAAIlB,UAAU,UAAd,UACE,6BACE,mBACEmB,KAAK,KACLnB,UAAU,WACVa,QAAS,WACPK,EAAS,QAJb,mBAWF,6BACE,mBACEC,KAAK,WACLN,QAAS,WACPK,EAAS,WAHb,sBAUF,6BACE,mBACEC,KAAK,cACLN,QAAS,WACPK,EAAS,cAHb,6BCxBOE,EAAU,WACrB,MAAkC5B,mBAAS,IAA3C,mBAAO6B,EAAP,KAAkBC,EAAlB,KACA,EAAgC9B,mBAAS,IAAzC,mBAAOJ,EAAP,KAAiBmC,EAAjB,KACA,EAAkD/B,oBAAS,GAA3D,mBAAOgC,EAAP,KAA0BC,EAA1B,KACA,EAAoCjC,mBAAS,OAA7C,mBAAOkC,EAAP,KAAmBC,EAAnB,KAEMC,EAAmBxC,EAASyC,QAAO,SAAA3B,GAAI,OAAKA,EAAKE,aAgHjD0B,EAAcC,uBAAY,SAACjC,GAC/BwB,EAAaxB,EAAEiB,OAAOD,UAGxB,OACE,qCACE,yBAAQd,UAAU,SAAlB,UACE,uCAEA,sBACEgC,SAxGQ,SAAClC,GAEf,GADAA,EAAEmC,iBACEZ,EAAW,CACb,IAAMnB,EAAO,CACXI,IAAK,IAAI4B,KACTtB,MAAOS,EACPjB,WAAW,GAGbmB,EAAY,GAAD,mBAAKnC,GAAL,CAAec,KAC1BoB,EAAa,MA6FX,SAGE,uBACEb,KAAK,OACLK,MAAOO,EACPrB,UAAU,WACVmC,YAAY,yBACZxB,SAAUmB,SAKf1C,EAASgD,OAAS,GACjB,qCACE,0BAASpC,UAAU,OAAnB,UACE,uBACES,KAAK,WACLC,QAAqC,IAA5BkB,EAAiBQ,OAC1B9B,GAAG,aACHN,UAAU,aACVa,QA5IM,WAChB,IAAIwB,EACAb,GACFa,EAAiBjD,EAASa,KAAI,SAAAC,GAAI,kCAC7BA,GAD6B,IACvBE,WAAW,OAEtBqB,GAAqB,KAErBY,EAAiBjD,EAASa,KAAI,SAAAC,GAAI,kCAC7BA,GAD6B,IACvBE,WAAW,OAEtBqB,GAAqB,IAEvBF,EAAYc,MAiIJ,uBAAOC,QAAQ,aAAf,qCAGF,cAAC,EAAD,CACElD,SAnEY,SAACqB,GACrB,IAAI8B,EAEJ,OAAQ9B,GACN,IAAK,MACH8B,EAAK,YAAOnD,GACZ,MACF,IAAK,SACHmD,EAAQ,YAAInD,GAAUyC,QAAO,SAAA3B,GAAI,OAAKA,EAAKE,aAC3C,MACF,IAAK,YACHmC,EAAQ,YAAInD,GAAUyC,QAAO,SAAA3B,GAAI,OAAIA,EAAKE,aAO9C,OAAOmC,EAiDWC,CAAcd,GACxBrC,YAlGc,SAACoD,GACvB,IACMC,EADetD,EAASuD,MAAK,SAAAzC,GAAI,OAAIA,EAAKI,KAAOmC,KAC3BrC,UAEtBwC,EAAkBxD,EAASa,KAAI,SAACC,GACpC,OAAIA,EAAKI,KAAOmC,EACPvC,EAGF,2BACFA,GADL,IAEEE,WAAYsC,OAIStD,EAASuD,MAAK,SAAAzC,GAAI,OAAKA,EAAKE,cAGnDqB,GAAqB,GAGvBF,EAAYqB,IA8EJtD,SA3ES,SAACuD,GAClB,IAAMC,EAAW1D,EAASyC,QAAO,SAAA3B,GAAI,OAAIA,EAAKI,KAAOuC,KAErDtB,EAAYuB,IAyEJvD,SAvHS,SAACwD,EAAUC,GAC5B,GAAKD,EAAL,CAIA,IAAME,EAAe7D,EAASa,KAAI,SAACC,GACjC,OAAIA,EAAKI,KAAO0C,EACP9C,EAGF,2BACFA,GADL,IAEEU,MAAOmC,OAIXxB,EAAY0B,OAyGN,yBAAQjD,UAAU,SAAlB,UAC+B,IAA5B4B,EAAiBQ,OAChB,uBAAMpC,UAAU,aAAhB,UACG4B,EAAiBQ,OADpB,mBAKA,uBAAMpC,UAAU,aAAhB,UACG4B,EAAiBQ,OADpB,oBAMF,cAAC,EAAD,CAAalB,SAhEL,SAACgC,GACjBvB,EAAcuB,MAiEN,wBACEzC,KAAK,SACLT,UAAU,kBACVa,QAjEW,WACrB,IAAMsC,EAAuB/D,EAASyC,QAAO,SAAA3B,GAAI,OAAKA,EAAKE,aAE3DmB,EAAY4B,IA2DJ,uCCvKGC,MARf,WACE,OACE,yBAASpD,UAAU,UAAnB,SACE,cAAC,EAAD,OCGNqD,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.074fe60c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nexport const TodoList = ({\n  todoList,\n  onCompleted,\n  onRemove,\n  onUpdate,\n}) => {\n  const [editingId, setEditingId] = useState();\n  const [updatedTitle, setUpdatedTitle] = useState('');\n\n  const handleChange = (e) => {\n    if (e.key === 'Enter') {\n      onUpdate(updatedTitle, editingId);\n      setEditingId(-1);\n    }\n\n    if (e.key === 'Escape') {\n      setEditingId(-1);\n    }\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {todoList.map(todo => (\n        <li\n          key={todo.id}\n          className={classNames(\n            { completed: todo.completed },\n            { editing: editingId === todo.id },\n          )}\n          onDoubleClick={() => {\n            setEditingId(todo.id);\n          }}\n          onBlur={() => {\n            onUpdate(updatedTitle, editingId);\n            setEditingId(-1);\n          }}\n        >\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              checked={todo.completed}\n              onChange={() => {\n                onCompleted(todo.id);\n              }}\n            />\n            <label>\n              {todo.title}\n            </label>\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              onClick={() => {\n                onRemove(todo.id);\n              }}\n            />\n          </div>\n          <input\n            type=\"text\"\n            className=\"edit\"\n            value={updatedTitle || todo.title}\n            onChange={(e) => {\n              setUpdatedTitle(e.target.value);\n            }}\n            onKeyDown={handleChange}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\n\nexport const TodosFilter = ({ onFilter }) => (\n  <ul className=\"filters\">\n    <li>\n      <a\n        href=\"#/\"\n        className=\"selected\"\n        onClick={() => {\n          onFilter('all');\n        }}\n      >\n        All\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/active\"\n        onClick={() => {\n          onFilter('active');\n        }}\n      >\n        Active\n      </a>\n    </li>\n\n    <li>\n      <a\n        href=\"#/completed\"\n        onClick={() => {\n          onFilter('completed');\n        }}\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n);\n","import React, { useCallback, useState } from 'react';\nimport { TodoList } from './TodoList';\nimport { TodosFilter } from './TodosFilter';\n\nexport const TodoApp = () => {\n  const [inputText, setInputText] = useState('');\n  const [todoList, setTodoList] = useState([]);\n  const [allTodosCompleted, setAllTodosCompleted] = useState(false);\n  const [filterType, setFilterType] = useState('all');\n\n  const unCompletedTodos = todoList.filter(todo => !todo.completed);\n\n  const toggleAll = () => {\n    let completedTodos;\n    if (allTodosCompleted) {\n      completedTodos = todoList.map(todo => ({\n        ...todo, completed: false,\n      }));\n      setAllTodosCompleted(false);\n    } else {\n      completedTodos = todoList.map(todo => ({\n        ...todo, completed: true,\n      }));\n      setAllTodosCompleted(true);\n    }\n    setTodoList(completedTodos);\n  };\n\n  const addTodo = (e) => {\n    e.preventDefault();\n    if (inputText) {\n      const todo = {\n        id: +new Date(),\n        title: inputText,\n        completed: false,\n      };\n\n      setTodoList([...todoList, todo]);\n      setInputText('');\n    }\n  };\n\n  const updateTodo = (newValue, todoToUpdateId) => {\n    if (!newValue) {\n      return;\n    }\n\n    const updatedTodos = todoList.map((todo) => {\n      if (todo.id !== todoToUpdateId) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        title: newValue,\n      };\n    });\n\n    setTodoList(updatedTodos);\n  };\n\n  const toggleCompleted = (completedTodoId) => {\n    const todoToChange = todoList.find(todo => todo.id === completedTodoId);\n    const status = todoToChange.completed;\n\n    const updatedTodoList = todoList.map((todo) => {\n      if (todo.id !== completedTodoId) {\n        return todo;\n      }\n\n      return {\n        ...todo,\n        completed: !status,\n      };\n    });\n\n    const uncomplitedTodos = todoList.find(todo => !todo.completed);\n\n    if (!uncomplitedTodos) {\n      setAllTodosCompleted(false)\n    };\n\n    setTodoList(updatedTodoList);\n  };\n\n  const removeTodo = (removedTodoId) => {\n    const newTodos = todoList.filter(todo => todo.id !== removedTodoId);\n\n    setTodoList(newTodos);\n  };\n\n  const filteredTodos = (type) => {\n    let todos;\n\n    switch (type) {\n      case 'all':\n        todos = [...todoList];\n        break;\n      case 'active':\n        todos = [...todoList].filter(todo => !todo.completed);\n        break;\n      case 'completed':\n        todos = [...todoList].filter(todo => todo.completed);\n        break;\n\n      default:\n        break;\n    }\n\n    return todos;\n  };\n\n  const setFilter = (newType) => {\n    setFilterType(newType);\n  };\n\n  const clearCompleted = () => {\n    const onlyInCompletedTodos = todoList.filter(todo => !todo.completed);\n\n    setTodoList(onlyInCompletedTodos);\n  };\n\n  const updateInput = useCallback((e) => {\n    setInputText(e.target.value);\n  })\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <form\n          onSubmit={addTodo}\n        >\n          <input\n            type=\"text\"\n            value={inputText}\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onChange={updateInput}\n          />\n        </form>\n      </header>\n\n      {todoList.length > 0 && (\n        <>\n          <section className=\"main\">\n            <input\n              type=\"checkbox\"\n              checked={unCompletedTodos.length === 0}\n              id=\"toggle-all\"\n              className=\"toggle-all\"\n              onClick={toggleAll}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          </section>\n          <TodoList\n            todoList={filteredTodos(filterType)}\n            onCompleted={toggleCompleted}\n            onRemove={removeTodo}\n            onUpdate={updateTodo}\n          />\n          <footer className=\"footer\">\n            {unCompletedTodos.length === 1 ? (\n              <span className=\"todo-count\">\n                {unCompletedTodos.length}\n                &nbsp;item left\n              </span>\n            ) : (\n              <span className=\"todo-count\">\n                {unCompletedTodos.length}\n                &nbsp;items left\n              </span>\n            )}\n\n            <TodosFilter onFilter={setFilter} />\n\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={clearCompleted}\n            >\n              Clear completed\n            </button>\n          </footer>\n        </>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp';\n\nfunction App() {\n  return (\n    <section className=\"todoapp\">\n      <TodoApp />\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}